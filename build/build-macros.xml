<!--
  ~ Doms build framework version 1.0.15
  ~
  ~ $Id$
  ~ $Revision$
  ~ $Date$
  ~ $Author$
  ~
  ~ The DOMS project.
  ~ Copyright (C) 2007-2010  The State and University Library
  ~
  ~ Licensed to the Apache Software Foundation (ASF) under one
  ~ or more contributor license agreements.  See the NOTICE file
  ~ distributed with this work for additional information
  ~ regarding copyright ownership.  The ASF licenses this file
  ~ to you under the Apache License, Version 2.0 (the
  ~ "License"); you may not use this file except in compliance
  ~ with the License.  You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied.  See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
  -->

<project name="macros">
    <!--Part of doms build framework version 1.0.15-->


    <property name="global.dir" value="${basedir}/.."/>
    <dirname property="my.basedir" file="${ant.file.macros}"/>


    <property file="${global.dir}/build.properties"/>
    <property file="${my.basedir}/build-framework.properties"/>


    <property name="jarfile" value="${ant.project.name}-${version}.jar"/>
    <property name="srcpack.zip" value="${ant.project.name}-${version}-src.zip"/>
    <property name="docspack.zip" value="${ant.project.name}-${version}-apidocs.zip"/>
    <property name="execfile" value="${ant.project.name}-${version}-bin.zip"/>


    <path id="script.classpath">
        <fileset dir="${my.basedir}/${rhino.folder}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${my.basedir}/${bsf.folder}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${my.basedir}/${commonslogging.folder}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!--Call the specified target in all the specified dirs-->
    <scriptdef name="dependsloop" language="javascript"
               classpathref="script.classpath"
               src="${my.basedir}/dependsforloop.js">
        <attribute name="target"/>
        <attribute name="dependencies"/>
    </scriptdef>


    <!--Create list of files from a dirset-->
    <scriptdef name="convertPath" language="javascript"
               classpathref="script.classpath"
               src="${my.basedir}/convertPath.js">
        <attribute name="dirset"/>
        <attribute name="postfix"/>
        <attribute name="newfileset"/>
    </scriptdef>


    <macrodef name="loadSVNproperties">
        <sequential>
            <exec executable="svn" output="svn.temp.properties">
                <arg value="info"/>
            </exec>
            <property prefix="svn" file="svn.temp.properties"/>
            <delete file="svn.temp.properties"/>
        </sequential>
    </macrodef>


    <property name="warfilename" value="${ant.project.name}.war"/>


    <macrodef name="compile"
              description="Compile all java files in src and tempsrc,
              and copy these + properties to classes dir. Compiles with the
              given classpath">
        <attribute name="compile.classpath"/>
        <sequential>

            <!-- get the source compile classpath in a printable form -->

            <printPath somepath="@{compile.classpath}"/>

            <mkdir dir="classes"/>
            <mkdir dir="tempsrc"/>
            <javac source="1.6" destdir="classes" debug="on"
                   encoding="UTF-8">
                <src>
                    <pathelement path="src"/>
                    <pathelement path="tempsrc"/>
                </src>
                <classpath refid="@{compile.classpath}"/>
            </javac>
            <copy todir="classes">
                <fileset dir="src">
                    <include name="**/*.xml"/>
                </fileset>
                <fileset dir="tempsrc">
                    <include name="**/*.xml"/>
                </fileset>
            </copy>
        </sequential>
    </macrodef>

    <macrodef name="printPath" description="Pretty prints the specified path,
    for easier debugging">
        <attribute name="somepath"/>
        <sequential>
            <pathconvert pathsep="${line.separator}|   |-- "
                         property="echo.path.compile">
                <path refid="@{somepath}"/>
            </pathconvert>

            <echo message="|-- compile classpath"/>
            <echo message="|   |"/>
            <echo message="|   |-- ${echo.path.compile}"/>
        </sequential>
    </macrodef>

    <macrodef name="buildjar" description="Packs the classes folder into a jar
    file with the given name. The jarfile is placed in dist">
        <attribute name="jarfile"/>
        <sequential>
            <mkdir dir="dist"/>

            <jar destfile="dist/@{jarfile}"
                 basedir="classes">
                <manifest>
                    <attribute name="Title" value="@{jarfile}"/>
                    <attribute name="Built-by" value="${user.name}"/>
                    <attribute name="Version" value="${version}"/>
                    <attribute name="Svn-revision" value="${svn.Revision}"/>
                    <attribute name="Svn-url" value="${svn.URL}"/>
                    <attribute name="Svn-last-changed-rev" value="${svn.Last Changed Rev}"/>
                    <attribute name="Build-date" value="${NOW}"/>
                </manifest>


            </jar>
        </sequential>
    </macrodef>

    <macrodef name="sourcezip" description="Packs the src folder into a zip,
    with the given name, and places it in the dist folder">
        <attribute name="srcpack.zip"/>
        <sequential>
            <mkdir dir="dist"/>

            <zip destfile="dist/@{srcpack.zip}">
                <zipfileset dir="src">
                    <include name="**/*"/>
                </zipfileset>
                <zipfileset dir="tempsrc" erroronmissingdir="false">
                    <include name="**/*"/>
                </zipfileset>
            </zip>
        </sequential>
    </macrodef>

    <macrodef name="apidocs" description="Generates javadoc for all sources
    in src and tempsrc, and zips it to the dist folder with the given name">
        <attribute name="docspack.zip"/>
        <attribute name="build.classpath"/>
        <sequential>
            <mkdir dir="docstemp"/>
            <mkdir dir="dist"/>


            <javadoc destdir="docstemp"
                     classpathref="@{build.classpath}">
                <fileset dir="src"/>
                <fileset dir="tempsrc"/>
            </javadoc>
            <zip destfile="dist/@{docspack.zip}">
                <zipfileset dir="docstemp">
                    <include name="**/*"/>
                </zipfileset>
            </zip>
            <delete dir="docstemp"/>
        </sequential>
    </macrodef>


    <macrodef name="_copyLibsForDist" description="Copy all project libs used by
    this module to the usedlibs folder">
        <sequential>
            <convertPath dirset="project.libs"
                         postfix="/**/*"
                         newfileset="project.libs.all"/>
            <convertPath dirset="soap"
                         postfix="/**/*"
                         newfileset="soap.all"/>
            <convertPath dirset="rest"
                         postfix="/**/*"
                         newfileset="rest.all"/>
            <convertPath dirset="common"
                         postfix="/**/*"
                         newfileset="common.all"/>

            <copy todir="${global.dir}/usedlibs" overwrite="false">
                <fileset refid="project.libs.all"/>
                <fileset refid="soap.all"/>
                <fileset refid="rest.all"/>
                <fileset refid="common.all"/>
            </copy>
        </sequential>
    </macrodef>


    <macrodef name="buildwar"
              description="Packs the module as a war file">
        <attribute name="warfilename"/>
        <attribute name="webxml" default="web/WEB-INF/web.xml"/>
        <attribute name="web-inf"/>
        <attribute name="web-content"/>
        <attribute name="wsdl.dir" default=""/>
        <attribute name="jars.to.pack"/>
        <sequential>
            <mkdir dir="dist"/>
            <mkdir dir="classes"/>
            <copy todir="libtemp" flatten="true">
                <path refid="@{jars.to.pack}"/>
            </copy>

            <tstamp>
                <format property="NOW" pattern="yyyyMMddHHmmss"/>
            </tstamp>
            <loadSVNproperties/>

            <war destfile="dist/@{warfilename}"
                 webxml="@{webxml}" duplicate="fail">
                <!--                <classes dir="classes"/>-->
                <fileset refid="@{web-content}"/>
                <lib dir="libtemp"/>
                <lib dir="dist">
                    <include name="*.jar"/>
                </lib>
                <webinf refid="@{web-inf}" prefix="WEB-INF"/>
                <webinf dir="@{wsdl.dir}" prefix="WEB-INF/wsdl"
                        erroronmissingdir="false"/>
                <manifest>

                    <attribute name="Title" value="@{warfilename}"/>
                    <attribute name="Built-by" value="${user.name}"/>
                    <attribute name="Version" value="${version}"/>
                    <attribute name="Svn-revision" value="${svn.Revision}"/>
                    <attribute name="Build-date" value="${NOW}"/>

                </manifest>
            </war>
            <delete dir="libtemp"/>
        </sequential>

    </macrodef>


    <macrodef name="executablezip" description="Packs the module into a binary
       release">
        <sequential>
            <mkdir dir="dist"/>


            <convertPath dirset="module.libs"
                         postfix="/jars/*.jar"
                         newfileset="module.libs.jars"/>


            <convertPath dirset="project.libs"
                         postfix="/jars/*.jar"
                         newfileset="project.libs.jars"/>

            <convertPath dirset="module.dependencies"
                         postfix="/dist/**/*.jar"
                         newfileset="dependencies.jars"/>

            <copy todir="tempjars" flatten="true">
                <fileset refid="project.libs.jars"/>
                <fileset refid="module.libs.jars"/>
                <fileset refid="dependencies.jars"/>
            </copy>

            <zip destfile="dist/${execfile}">
                <zipfileset dir="bin" erroronmissingdir="false" prefix="bin">
                    <include name="**/*"/>
                </zipfileset>
                <zipfileset dir="config" erroronmissingdir="false"
                            prefix="config">
                    <include name="**/*"/>
                </zipfileset>
                <zipfileset dir="data" erroronmissingdir="false"
                            prefix="config">
                    <include name="**/*"/>
                </zipfileset>
                <zipfileset dir="tempjars" erroronmissingdir="false"
                            prefix="lib"/>
                <zipfileset dir="dist" erroronmissingdir="false"
                            prefix="lib">
                    <include name="*.jar"/>
                </zipfileset>

            </zip>
            <delete dir="tempjars"/>
        </sequential>
    </macrodef>


</project>